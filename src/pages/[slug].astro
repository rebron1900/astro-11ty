---
import { pages, postsAll, settings } from '../data/ghost-store.js';
import tocGen from '../utils/toc.js';

import BaseLayout from '../layouts/BaseLayout.astro';
import PostMeta from '../components/PostMeta.astro';
import Head from '../components/Head.astro';
import Pagination from '../components/Pagination.astro';
import Comments from '../components/Comments.astro';
import Toc from '../components/Toc.astro';
import Relitu from '../components/Relitu.jsx';
import TocTagloop from '../components/TocTagloop.astro';
import Header from '../components/Header.astro';
import Top from '../components/Top.astro';
import Menu from '../components/Menu.astro';
import CodeSlot from '../components/CodeSlot.astro';
import { Markup } from 'astro-remote';
import RemotePicture from '../components/RemotePicture.astro';
import Footer from '../components/Footer.astro';

export async function getStaticPaths() {
    const posts = postsAll.concat(pages);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { slug: post.slug },
        props: {
            post,
            type: post.type,
            nextPost: index + 1 !== postCount ? posts[index + 1] : null,
            prevPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

const { post, prevPost, nextPost } = Astro.props;
import HTML from 'html-parse-stringify';
import IFrameSlot from '../components/IFrameSlot.astro';

var ast = HTML.parse(post?.html);
let fatherList = '';

function findTextNodes(node, text) {
    let result = [];
    fatherList += text;

    // 检查当前节点
    if (node.type === 'text' && node.content.startsWith('[[') && !fatherList.endsWith('precode')) {
        node.content = node.content.replace('[[', '<a>test').replace(']]', '</a>');
        result.push(node);
    }

    // 如果有子节点，递归遍历
    if (node.children) {
        node.children.forEach((child) => {
            result = result.concat(findTextNodes(child, node.name));
        });
    }

    return result;
}

const result = [];

ast.forEach((node) => {
    const temp = findTextNodes(node, node.name);
    let fatherList = '';
});

const html = HTML.stringify(ast);

const tocHtml = tocGen(await post.html);
---

<BaseLayout post={post}>
    <Head slot="head" post={post} site={settings} title={post?.title + ' | ' + settings?.title + ' - ' + settings?.description} />

    <Header slot="header" title={post.title} />

    <Menu slot="menu" />
    <article slot="content" class="markdown book-article">
        <h1 class="book-title">
            {post.title}
        </h1>
        <PostMeta post={post} isFeature={true} />
        {post.html && <Markup content={html} sanitize={{ allowComponents: true }} components={{ pre: CodeSlot, img: RemotePicture, iframe: IFrameSlot }} />}
    </article>

    {post.type == 'post' && <Pagination slot="pagination" prev={prevPost} next={nextPost} />}

    <Comments slot="comments" />

    <Footer slot="footer" post={post} />

    <Relitu slot="relitu" />

    <Fragment slot="toc">
        {!tocHtml && <TocTagloop />}

        <Toc html={tocHtml} isToc={tocHtml && true} />
        <Top />
    </Fragment>

    <Fragment slot="h-toc">
        <aside class="hidden clearfix">
            <Toc html={tocHtml} isToc={tocHtml && true} />
        </aside>
    </Fragment>
</BaseLayout>
